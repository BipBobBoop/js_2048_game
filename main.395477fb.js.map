{"version":3,"sources":["scripts/main.js"],"names":["body","document","querySelector","container","createElement","initializeGame","stage","gameHeader","gameField","gameNotification","insertAdjacentHTML","table","tbody","classList","add","append","i","tr","j","td","querySelectorAll","forEach","el","remove","messages","lose","win","start","createTile","emptyCells","length","emptyRandomCell","Math","floor","random","textContent","mergeValues","values","valuesMerged","map","num","index","array","scoring","filter","classEditor","cell","newValue","splice","moveCells","data","key","arr","rows","columns","arrValues","сell","reverse","gameOver","arrowCallback","ev","tableData","Array","from","row","cells","_","moveTile","option","window","addEventListener","removeEventListener","acc","score","parseInt","some","noEmptyTile","cantMove","concat","insertBefore","firstChild","target","closest","innerHTML","button"],"mappings":"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","file":"main.395477fb.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst body = document.querySelector('body');\nconst container = document.createElement('div');\n\ncontainer.classList.add('container');\nbody.insertBefore(container, body.firstChild);\n\nfunction initializeGame(stage) {\n  gameHeader();\n  gameField();\n  gameNotification(stage);\n}\n\nfunction gameHeader() {\n  container.insertAdjacentHTML('afterbegin', `\n    <div class=\"game-header\">\n      <h1>2048</h1>\n      <div class=\"controls\">\n        <p class=\"info\">\n          Score: <span class=\"game-score\">0</span>\n        </p>\n        <button class=\"button start\">Start</button>\n      </div>\n    </div>\n  `);\n}\n\nfunction gameField() {\n  const table = document.createElement('table');\n  const tbody = document.createElement('tbody');\n  const numRows = 4;\n  const numColumns = 4;\n\n  table.classList.add('game-field');\n  table.append(tbody);\n\n  for (let i = 0; i < numRows; i++) {\n    const tr = document.createElement('tr');\n\n    tr.classList.add('field-row\"');\n\n    for (let j = 0; j < numColumns; j++) {\n      const td = document.createElement('td');\n\n      td.classList.add('field-cell');\n      tr.append(td);\n    }\n\n    tbody.append(tr);\n  }\n\n  table.append(tbody);\n\n  container.append(table);\n}\n\nfunction gameNotification(stage) {\n  const messages = {\n    lose: 'You lose! Restart the game?',\n    win: 'Winner! Congrats! You did it!',\n    start: 'Press \"Start\" to begin game. Good luck!',\n  };\n\n  container.insertAdjacentHTML('beforeend', `\n    <div class=\"message-container\">\n    </div>\n  `);\n\n  if (stage) {\n    container.querySelectorAll('.message-container').forEach(el => el.remove());\n\n    container.insertAdjacentHTML('beforeend', `\n      <div class=\"message-container\">\n        <p class=\"message message-${stage}\">${messages[stage]}</p>\n      </div>\n    `);\n  }\n};\n\ninitializeGame('start');\n\nfunction createTile() {\n  const emptyCells = [...document.querySelectorAll('.game-field td:empty')];\n\n  if (emptyCells.length) {\n    const emptyRandomCell\n      = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    emptyRandomCell.textContent = Math.random() < 0.9 ? 2 : 4;\n    emptyRandomCell.classList.add(`field-cell--${emptyRandomCell.textContent}`);\n  }\n\n  return emptyCells;\n}\n\ncontainer.addEventListener('click', (ev) => {\n  if (ev.target.closest('.button')) {\n    container.innerHTML = '';\n    initializeGame();\n    createTile();\n    createTile();\n    moveTile('add');\n\n    const button = container.querySelector('.button');\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  }\n});\n\nfunction mergeValues(values) {\n  const valuesMerged = values.map((num, index, array) => {\n    if (num === array[index + 1]) {\n      array[index + 1] = null;\n      scoring(num * 2);\n\n      return num * 2;\n    } else {\n      return num;\n    }\n  }).filter((num) => num);\n\n  return valuesMerged;\n}\n\nfunction classEditor(values, cell) {\n  cell.classList.remove(`field-cell--${cell.textContent}`);\n\n  const newValue = values.splice(0, 1)[0];\n\n  cell.textContent = newValue;\n\n  if (!newValue) {\n    return;\n  }\n\n  cell.classList.add(`field-cell--${newValue}`);\n}\n\nfunction moveCells(data, key) {\n  let arr;\n\n  switch (key) {\n    case 'ArrowLeft':\n    case 'ArrowRight':\n      arr = data.rows;\n      break;\n    case 'ArrowUp':\n    case 'ArrowDown':\n      arr = data.columns;\n      break;\n  }\n\n  arr.forEach(el => {\n    const arrValues = [...el.map(сell => сell.textContent)]\n      .filter((num) => num);\n\n    if (key === 'ArrowDown' || key === 'ArrowRight') {\n      arrValues.reverse();\n    }\n\n    const valuesMerged = mergeValues(arrValues);\n\n    for (let i = 0; i < el.length; i++) {\n      const cell = key === 'ArrowUp' || key === 'ArrowLeft'\n        ? el[i] : el[el.length - i - 1];\n\n      classEditor(valuesMerged, cell);\n    }\n  });\n\n  gameOver(data);\n}\n\nfunction arrowCallback(ev) {\n  const table = body.querySelector('table');\n\n  const tableData = {\n    rows:\n      Array.from(document.querySelectorAll('tr'))\n        .map(row => Array.from(row.cells)),\n    columns:\n      Array.from(table.rows[0].cells)\n        .map((_, index) => Array.from(table.rows).map(row => row.cells[index])),\n  };\n\n  switch (ev.key) {\n    case 'ArrowLeft':\n    case 'ArrowRight':\n    case 'ArrowUp':\n    case 'ArrowDown':\n      moveCells(tableData, ev.key);\n      break;\n  }\n};\n\nfunction moveTile(option) {\n  switch (option) {\n    case 'add':\n      window.addEventListener('keydown', arrowCallback);\n      break;\n    case 'delete':\n      window.removeEventListener('keydown', arrowCallback);\n      break;\n  }\n}\n\nfunction scoring(acc) {\n  const score = container.querySelector('.game-score');\n\n  score.textContent = parseInt(score.textContent) + parseInt(acc);\n};\n\nfunction gameOver(data) {\n  const win = Array.from(\n    document.querySelectorAll('.game-field td'))\n    .some(cell => cell.textContent === '2048');\n\n  if (win) {\n    gameNotification('win');\n    moveTile('delete');\n  }\n\n  const noEmptyTile = !createTile().length;\n  let cantMove = true;\n\n  for (const arr of data.rows.concat(data.columns)) {\n    for (let i = 0; i < arr.length - 1; i++) {\n      if (arr[i].textContent === arr[i + 1].textContent) {\n        cantMove = false;\n        break;\n      }\n    }\n  }\n\n  if (noEmptyTile && cantMove) {\n    gameNotification('lose');\n    moveTile('delete');\n  }\n}\n"]}